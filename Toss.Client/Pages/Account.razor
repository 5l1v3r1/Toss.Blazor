@page "/account"
@inject IHttpApiClientRequestBuilderFactory ClientFactory;
@inject IAccountService AccountService;
@inject IUriHelper UriHelper

<AccountMenu></AccountMenu>

<EditForm Model="command" OnValidSubmit="@PostAccount">
    <DataAnnotationsValidator />
    <ServerSideValidator ref="serverSideValidator" />
    <div class="form-group">
        <label for="Email">Email</label>
        <InputText Class="form-control" bind-Value="@command.Email" />
        <ValidationMessage For="@(() => command.Email)" />
    </div>
    <div class="form-group">
        <label for="Name">User name</label>
        <InputText Class="form-control" bind-Value="@command.Name" />
        <ValidationMessage For="@(() => command.Name)" />
    </div>
    <SubmitButton CssClass="btn btn-primary">Save</SubmitButton>
</EditForm>

@functions {
    ServerSideValidator serverSideValidator;
    EditAccountCommand command = new EditAccountCommand();
    protected override async Task OnInitAsync()
    {
        var account =   await AccountService.CurrentAccount();
        command.Email = account.Email;
        command.Name = account.Name;
        StateHasChanged();
    }
    async Task PostAccount()
    {
        await ClientFactory.Create("/api/account/edit")
            .OnBadRequest<Dictionary<string,List<string>>>(errors => serverSideValidator.DisplayErrors(errors))
            .OnOK("Informations saved successfully")
            .Post(command);
        StateHasChanged();
    }
}

 