@inject IHttpApiClientRequestBuilderFactory ClientFactory
@inject IMessageService messageService
@using Microsoft.AspNetCore.Components.Forms
<div class="card">
    <div class="card-header">Create a Toss account</div>
    <div class="card-body p-2">
        <EditForm  OnValidSubmit="CreateAccount" Model="@command">
            <DataAnnotationsValidator />
            <ServerSideValidator ref="serverSideValidator"/>
            <div asp-validation-summary="All" class="text-danger"></div>
            <div class="form-group row mb-1">
                <label class="col-sm-3 col-form-label" for="NewEmail">Email</label>

                <div class="col-sm-9">
                    <InputText Class="form-control" bind-Value="@command.Email" />
                    <ValidationMessage For="@(() => command.Email)"/>
                </div>

            </div>
            <div class="form-group row mb-1">
                <label class="col-sm-3 col-form-label" for="NewName">Name</label>

                <div class="col-sm-9">
                    <InputText Class="form-control" bind-Value="@command.Name" />
                     <ValidationMessage For="@(() => command.Name)" />
                </div>
            </div>
            <div class="form-group row mb-1">
                <label class="col-sm-3 col-form-label" for="NewPassword">Password</label>

                <div class="col-sm-9">
                    <InputPassword Class="form-control" bind-Value="@command.Password" />
                     <ValidationMessage For="@(() => command.Password)" />
                </div>
            </div>
            <div class="form-group row mb-1">
                <label class="col-sm-3 col-form-label" for="NewConfirmPassword">Confirm</label>

                <div class="col-sm-9">
                    <InputPassword Class="form-control" bind-Value="@command.ConfirmPassword" />
                    <ValidationMessage For="@(() => command.ConfirmPassword)" />
                </div>
            </div>
            <div class="form-group text-center mb-0">
                <SubmitButton Id="BtnRegister" CssClass="btn btn-primary">Register</SubmitButton>
             
            </div>  

        </EditForm>
    </div>
</div>
@functions{
    
    RegisterCommand command = new RegisterCommand();
    ServerSideValidator serverSideValidator;
    async Task CreateAccount(EditContext context)
    {
        await ClientFactory.Create("/api/account/register")
            .OnBadRequest<Dictionary<string, List<string>>>(errors => {

                serverSideValidator.DisplayErrors(errors);
            })
            .OnOK( () =>
            {
                messageService.Info( "Successfully registered, please confirm your account by clicking on the link in the email sent to " + command.Email);
                command = new RegisterCommand();
                StateHasChanged();
            })
            .Post(command);
    }
}
