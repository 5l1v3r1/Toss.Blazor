@inject IHttpApiClientRequestBuilderFactory ClientFactory;
@inject IUriHelper UriHelper
@inject IAccountService AccountService;
<div class="card">
    <div class="card-header">
        Use a Toss account to log in.
    </div>
    <div class="card-body  p-2">
        <EditForm Model="@command" OnValidSubmit="@TryLogin">
            <DataAnnotationsValidator />
            <ServerSideValidator ref="serverSideValidator" />

            <div class="form-group row mb-1">
                <label for="UserName" class="col-sm-3 col-form-label">Username</label>

                <div class="col-sm-9">
                    <InputText Class="form-control" bind-Value="@command.UserName" />
                    <ValidationMessage For="@(() => command.UserName)" />
                </div>
            </div>
            <div class="form-group row mb-1">
                <label asp-for="Password" class="col-sm-3 col-form-label">Password</label>

                <div class="col-sm-9">
                    <InputPassword Class="form-control" Autocomplete="current-password" bind-Value="@command.Password" />
                    <ValidationMessage For="@(() => command.Password)" />
                </div>
            </div>
            <div class="form-group row mb-1">
                <div class="col-sm-3"></div>

                <div class="checkbox col-sm-9">

                    <div class="form-check">
                        <InputCheckbox bind-Value="@command.RememberMe" Class="form-check-input"></InputCheckbox>
                        <ValidationMessage For="@(() => command.RememberMe)" />
                        <label class="form-check-label" for="RememberMe">Remember me</label>
                    </div>
                </div>
            </div>
            <div class="form-group text-center mb-1">
                <SubmitButton CssClass="btn btn-primary" Id="BtnLogin">Log in</SubmitButton>
                <a href="/account/forgotPassword">Forgot your password?</a>
            </div>
        </EditForm>
    </div>
</div>

@functions{
    LoginCommand command = new LoginCommand();
    ServerSideValidator serverSideValidator;
    async Task<bool> TryLogin()
    {

        var errors = await AccountService.Login(command);
        if (errors != null && errors.Any())
        {
            serverSideValidator.DisplayErrors(errors);
        }
        StateHasChanged();
        return false;
    }
}
