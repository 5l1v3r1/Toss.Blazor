@page "/account/changePassword"
@inject IHttpApiClientRequestBuilderFactory ClientFactory;
@inject IUriHelper UriHelper
@inject IAccountService AccountService
@inject IMessageService messageService
<AccountMenu></AccountMenu>
@if (_account != null && _account.HasPassword)
{
<EditForm Model="@command" OnValidSubmit="ChangePassword">
    <DataAnnotationsValidator />
    <ServerSideValidator ref="serverSideValidator" />
    <div class="form-group">
        <label for="OldPassword">Old Password</label>
        <InputPassword Class="form-control" Autocomplete="current-password" bind-Value="@command.OldPassword" />
        <ValidationMessage For="@(() => command.OldPassword)" />
    </div>
    <div class="form-group">
        <label for="NewPassword"> New Password</label>
        <InputPassword Class="form-control" Autocomplete="new-password" bind-Value="@command.NewPassword" />
        <ValidationMessage For="@(() => command.NewPassword)" />
    </div>
    <div class="form-group">
        <label for="ConfirmPassword">Confirm Password</label>
        <InputPassword Class="form-control" Autocomplete="new-password" bind-Value="@command.ConfirmPassword" />
        <ValidationMessage For="@(() => command.ConfirmPassword)" />
    </div>
    <button type="submit" class="btn btn-primary">Update password</button>
</EditForm>
}
else
{
    <div class="alert alert-info">You are logging in through an external provider such as Google, you can not change your password as you don't have one here. Go to your provider profile and change your apssword there.</div>

}
    @functions{
        ChangePasswordCommand command = new ChangePasswordCommand();
        ServerSideValidator serverSideValidator;
        private AccountViewModel _account;
        protected override async Task OnInitAsync()
        {
            _account = await AccountService.CurrentAccount();
            StateHasChanged();
        }
        async Task ChangePassword()
        {

            await ClientFactory.Create("/api/account/changePassword")
                .OnBadRequest<Dictionary<string,List<string>>>(errors => serverSideValidator.DisplayErrors(errors))
                .OnOK( () =>
                {
                    messageService.Info("Password changed successfully");
                    command = new ChangePasswordCommand();
                })
                .Post(command);
            StateHasChanged();
        }
    }
