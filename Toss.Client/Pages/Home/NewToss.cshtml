
@inject IHttpApiClientRequestBuilderFactory ClientFactory
@implements IStripeCallBack
@inject IJsInterop JsInterop
<!-- Modal -->
<div class="modal fade" ref="modal" tabindex="-1" role="dialog" aria-hidden="true">
    <div class="modal-dialog" role="document">

        <div class="modal-content">
            <EditForm Model="@command" OnValidSubmit="@SendToss">
                <DataAnnotationsValidator></DataAnnotationsValidator>
                <ServerSideValidator ref="serverSideValidator"></ServerSideValidator>
                <div class="modal-body">
                    <InputTextArea Class="form-control" bind-Value="@command.Content"></InputTextArea>
                    <ValidationMessage For="@(() => command.Content)" />
                    @*<textarea bind="@command.Content" id="TxtNewToss" placeholder="New Toss" class="form-control" style="min-width: 100%; height:200px;"></textarea>*@

                    <small class="text-muted"><a href="https://www.markdownguide.org/cheat-sheet" target="_blank">Markdown syntax</a> supported</small>
                    <div class="custom-control custom-checkbox">
                        <input type="checkbox" bind="isSponsoredToss" class="custom-control-input" id="customCheck1" />
                        <label class="custom-control-label" for="customCheck1">Sponsored Toss</label>
                    </div>
                    @if (isSponsoredToss)
                    {
                        <div class="alert alert-info mt-2">
                            You can create a sponsored Toss :
                            <ul>
                                <li>It'll be displayed as first Toss during 30 sec for the number of times entered below</li>
                                <li>Only one sponsored toss is displayed at a time, if multiple matches the current tag, one is picked randomly. </li>
                                <li>One display costs @(TossCreateCommand.CtsCostPerDisplay / 100) €, you have to get between 50 and 1000 displays. Once you click on "Toss it" you will be redirected to the payment system.</li>
                                <li>The TOSS will be displayed as a normal toss, once we get the payment confirmation it will be displayed as a sponsored toss like said before.</li>
                                <li>You can read more details about it <a href="https://github.com">here</a>. By creating a sponsored toss, you agree on the conditions explained on the provided link.</li>

                            </ul>
                        </div>
                        <div class="form-group">
                            <label for="TxtDisplayCount">Display count</label>
                            <InputNumber Value="@command.SponsoredDisplayedCount" Class="form-control"></InputNumber>
                            <ValidationMessage For="@(() => command.SponsoredDisplayedCount)" />
                        </div>
                    }

                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    <button id="BtnNewToss"class="btn btn-primary btn-block" type="submit">Toss-it</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

<div class="form-group">
    <div class="input-group m-1 btn-group" role="group">
        <button type="button" class="btn btn-primary" id="BtnOpenNewToss" onclick="@ShowModal"><i class="fas fa-plus"></i> New TOSS</button>
    </div>
</div>
@functions{
    ElementRef modal;

    bool isSponsoredToss = false;

    [Parameter]
    protected Func<Task> OnNewTossCreated { get; set; }

    TossCreateCommand command = new TossCreateCommand();
    ServerSideValidator serverSideValidator;
    
    protected async Task SendToss()
    {
        if (isSponsoredToss)
        {
            await JsInterop.OpenStripe(this, command.SponsoredDisplayedCount.Value * TossCreateCommand.CtsCostPerDisplay);
            return;
        }
        await DoSendToss();

    }
    private async Task DoSendToss()
    {
        await ClientFactory.Create("/api/toss/create")
            .OnOK(async () =>
            {
                command = new TossCreateCommand();
                await OnNewTossCreated?.Invoke();
                await JsInterop.HideModal(modal);
            })
            .OnBadRequest<Dictionary<string, List<string>>>(e => serverSideValidator.DisplayErrors(e))
            .Post(command);
        StateHasChanged();
    }
    protected async Task ShowModal()
    {
        await JsInterop.ShowModal(modal);
    }
    [JSInvokable]
    public async Task TokenReceived(string token)
    {
        command.StripeChargeToken = token;
        await DoSendToss();
    }
}
