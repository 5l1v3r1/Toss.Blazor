@page "/new"
@inject IHttpApiClientRequestBuilderFactory ClientFactory
@implements IStripeCallBack
@inject IJsInterop JsInterop;
@inject IUriHelper urlHelper;
@inject IMessageService messageService;
<h1>New Toss</h1>
<EditForm Model="@command" OnValidSubmit="@SendToss">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <ServerSideValidator ref="serverSideValidator"></ServerSideValidator>
    <div class="form-group">
        <InputTextArea Class="form-control" Id="TextAreaNewToss" bind-Value="@command.Content"></InputTextArea>
        <ValidationMessage For="@(() => command.Content)" />
        <small class="text-muted"><a href="https://www.markdownguide.org/cheat-sheet" target="_blank">Markdown syntax</a> supported</small>
    </div>

    <div class="form-group">
        <div class="custom-control custom-checkbox">
            <input type="checkbox" bind="isSponsoredToss" class="custom-control-input" id="sponsoredToss" />
            <label class="custom-control-label" for="sponsoredToss">Sponsored Toss</label>
        </div>
    </div>
    @if (isSponsoredToss)
    {
        <div class="alert alert-info mt-2">
            You can create a sponsored Toss :
            <ul>
                <li>One sponsored toss, picked randomly, will be displayed every 10 Toss on the matching tags.</li>
                <li>One display costs @((decimal)TossCreateCommand.CtsCostPerDisplay / 100) €, you have to get between 50 and 1000 displays. Once you click on "Create this Toss" you will be redirected to the payment system.</li>
                <li>The TOSS will be displayed as a normal toss, once we get the payment confirmation it will be displayed as a sponsored toss like said before.</li>
            </ul>
        </div>
        <div class="form-group">
            <label for="TxtDisplayCount">Display count</label>
            <InputNumber bind-Value="@command.SponsoredDisplayedCount" Class="form-control"></InputNumber>
            <ValidationMessage For="@(() => command.SponsoredDisplayedCount)" />

        </div>
    }
    <div class="form-group">
        <SubmitButton Id="BtnNewToss" CssClass="btn btn-primary">
            Create this Toss
            @if (isSponsoredToss)
            {
                <small class="">(and pay @(command.SponsoredDisplayedCount * (decimal)TossCreateCommand.CtsCostPerDisplay / 100) €)</small>
            }
        </SubmitButton>
       
    </div>
</EditForm>

@functions{

    bool isSponsoredToss
    {
        get
        {
            return command.SponsoredDisplayedCount.HasValue;
        }
        set
        {
            if (value)
            {
                command.SponsoredDisplayedCount = 50;
            }
            else
            {
                command.SponsoredDisplayedCount = null;
            }
        }
    }

    TossCreateCommand command = new TossCreateCommand();
    ServerSideValidator serverSideValidator;

    protected async Task SendToss()
    {
        if (isSponsoredToss)
        {
            await JsInterop.OpenStripe(this, command.SponsoredDisplayedCount.Value * TossCreateCommand.CtsCostPerDisplay);
            return;
        }
        await DoSendToss();

    }
    private async Task DoSendToss()
    {
        await ClientFactory.Create("/api/toss/create")
            .OnOK(() =>
            {
                command = new TossCreateCommand();
                messageService.Info("Toss successfully created.");
                urlHelper.NavigateTo("/");
            })
            .OnBadRequest<Dictionary<string, List<string>>>(e => serverSideValidator.DisplayErrors(e))
            .Post(command);
        StateHasChanged();
    }

    [JSInvokable]
    public async Task TokenReceived(string token)
    {
        command.StripeChargeToken = token;
        await DoSendToss();
    }
}
