@inject IHttpApiClientRequestBuilderFactory ClientFactory;
@inject IAccountService AccountService

<div class="form-inline">

    <div class="form-group">
        <div class="input-group m-1">
            <button type="button" class="btn"  onclick="@(async () => await ChangeHashtag(""))">
                Home
            </button>
        </div>
        @foreach (var hashTag in _account.Hashtags ?? new List<string>())
        {
            <div class="input-group m-1">
                <button type="button" onclick="@(async () => await ChangeHashtag(hashTag))" class="btn">
                    #@hashTag
                </button>
            </div>
        }
        <div class="input-group m-1">
            <input type="text" class="form-control" bind="@newHashtag" placeholder="Add hashtag" aria-label="Add hashtag" aria-describedby="basic-addon2" />
            <div class="input-group-append">
                <button class="btn btn-outline-secondary" onclick="@(async () => await AddHashtag())" type="button">
                    <i class="fas fa-plus"></i>
                </button>
            </div>
        </div>
    </div>
</div>

@functions{
    AccountViewModel _account = new AccountViewModel();
    Dictionary<string, string> _errors;
    bool loading = false;
    string newHashtag;
    string currentHashtag = null;
    [Parameter]
    private Func<string,Task> OnHashTagChanged { get; set; }

    protected async Task ChangeHashtag(string hashtag)
    {
        currentHashtag = hashtag;
        await OnHashTagChanged(hashtag);
        StateHasChanged();
    }
    protected override async Task OnInitAsync()
    {

        _account = await AccountService.CurrentAccount();
        StateHasChanged();
    }
    protected async Task AddHashtag()
    {
        loading = true;
        StateHasChanged();
        await ClientFactory.Create("/api/account/addHashTag")
            .OnOK(() =>
            {
                JsInterop.Toastr("success", "Hashtag added with success");
                _account.Hashtags.Add(newHashtag);
                newHashtag = null;
            })
            .OnBadRequest<Dictionary<string, string>>(e => JsInterop.Toastr("error",e["newTag"]))
            .Post(newHashtag);
        loading = false;
        StateHasChanged();

    }
}

