@inject IHttpApiClientRequestBuilderFactory ClientFactory;
@inject IUriHelper UriHelper
<h4>Use a Toss account to log in.</h4>
<form method="post" >

    <div class="form-group">
        <label for="UserName">UserName</label>
        <input bind="@loginCommand.UserName" id="UserName" class="form-control" />
        <ValidationError Errors="@_errors" FieldName="UserName" />
    </div>
    <div class="form-group">
        <label asp-for="Password">Password</label>
        <input bind="@loginCommand.Password" id="Password" type="password"  class="form-control" />
        <ValidationError Errors="@_errors" FieldName="Password" />
    </div>
    <div class="form-group">
        <div class="checkbox">
            <label for="RememberMe">
                <input id="RememberMe" bind="@loginCommand.RememberMe" type="checkbox" />
                <label for="RememberMe">Remember me</label>
            </label>
        </div>
    </div>
    <div class="form-group">
        <button type="button" onclick="@TryLogin" class="btn btn-default">Log in</button>
        <a href="/account/forgotPassword">Forgot your password?</a>
    </div>
</form>


@functions{
    LoginCommand loginCommand = new LoginCommand();
    ValidationErrorDictonary _errors;
    async Task<bool> TryLogin(UIEventArgs even)
    {
        _errors = null;
        await ClientFactory.Create("/api/account/login")
            .OnBadRequest<ValidationErrorDictonary>(errors => _errors = errors)
            .OnOK(null,"/")
            .Post(loginCommand);
        StateHasChanged();
        return false;
    }
}
