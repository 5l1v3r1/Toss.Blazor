@page "/account/externalLogin"
@inject HttpClient Http
@inject IUriHelper UriHelper
@layout LoginLayout

<h4>Associate your @model.Provider account.</h4>
<hr />

<p class="text-info">
    You've successfully authenticated with <strong>@model.Provider</strong>.
    Please enter an email address and a login for this site below and click the Register button to finish
    logging in.
</p>

<div class="row">
    <div class="col-md-4">
        <form method="post" onsubmit="@(async () => await ExternalLoginConfirm())">
            <div class="form-group">
                <label for="Email">Email</label>
                <input id="Email" bind="@model.Email" class="form-control" />
                <ValidationError FieldName="Email" Errors="@_errors" />
            </div>
            <div class="form-group">
                <label for="Name">User Name</label>
                <input id="Name" bind="@model.Name" class="form-control" />
                <ValidationError FieldName="Name" Errors="@_errors" />
            </div>
            <button type="submit" class="btn btn-default">Register</button>
            <ValidationError FieldName="Other" Errors="@_errors" />
        </form>
    </div>
</div>


@functions {


    Dictionary<string, string> _errors;
    ExternalLoginViewModel model = new ExternalLoginViewModel();
    protected override async Task OnInitAsync()
    {
        await new HttpApiClientRequestBuilder(Http, "/api/account/externalLoginDetails", UriHelper)
            .OnOK<ExternalLoginViewModel>(a => model = a)
            .Get();
        StateHasChanged();
    }
    async Task ExternalLoginConfirm()
    {
        await new HttpApiClientRequestBuilder(Http, "/api/account/externalLoginConfirmation", UriHelper)
            .OnBadRequest<Dictionary<string, string>>(errors => _errors = errors)
            .OnOK(() =>
            {
                JsInterop.Toastr("success", "Account successfully set");
                _errors = null;
                UriHelper.NavigateTo("/");
            })
            .Post(model);
        StateHasChanged();
    }
}
