@page "/"
@inject IHttpApiClientRequestBuilderFactory ClientFactory

<h3>TOSS</h3>
<div class="card-columns">
    <div class="card">
        <div class="card-body p-2">
            <h5 class="card-title">New Toss</h5>
            <form method="post" onsubmit="@(async () => await SendToss())">
                <p class="card-text">

                    <textarea bind="@newToss.Content" class="form-control" style="min-width: 100%">

                    </textarea>

                </p>
                <div class="card-footer p-1">
                    <button class="btn btn-primary btn-block" type="submit">Toss-it</button>
                </div>
            </form>

        </div>
    </div>
    @if (loading)
    {
        <div class="card border-secondary">
            <div class="card-body p-2 text-secondary">
                <h5 class="card-title">Loading</h5>
                <p class="card-text">
                    <i class="fas fa-spinner fa-spin"></i>
                </p>

            </div>
        </div>

    }
    @foreach (var toss in Tosses.OrderByDescending(t => t.DateOfPost))
    {
        <div class="card">
            <div class="card-body p-2">
                @*<h5 class="card-title">Toss title</h5>*@
                <p class="card-text">@toss.Content</p>

            </div>
            <div class="card-footer p-1">
                <small class="text-muted"><b>@toss.UserName</b> - @toss.DateOfPost</small>
            </div>
        </div>
    }
</div>
@functions{
    List<TossLastQueryItem> Tosses = new List<TossLastQueryItem>();
    TossCreateCommand newToss = new TossCreateCommand();
    Dictionary<string, string> _errors;
    bool loading = false;
    protected override async Task OnInitAsync()
    {
        await RefreshTossList();
    }
    protected async Task RefreshTossList()
    {
        loading = true;
        StateHasChanged();
        Tosses = Enumerable.Range(0, 50)
        .Select(i => new TossLastQueryItem()
        {
            Content = "lorem ipsum mfoksdlkf,sdlk,sdlfkjdsl lkd lfjd lkjsdlkfj sd",
            DateOfPost = DateTime.Now.AddMinutes(-i * 5),
            UserName = "Tosster-" + i
        })
        .ToList();
        await Task.Delay(1000);
        loading = false;
        StateHasChanged();
    }
    protected async Task SendToss()
    {
        await ClientFactory.Create("/toss/create")
            .OnOK(async () =>
            {
                newToss = new TossCreateCommand();
                await RefreshTossList();
            })
            .OnBadRequest<Dictionary<string, string>>(e => _errors = e)
            .Post();
        await RefreshTossList();
        StateHasChanged();

    }
}
