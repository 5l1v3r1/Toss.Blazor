@page "/"
@page "/tag/{CurrentTag}"
@page "/tag/"
@inject IHttpApiClientRequestBuilderFactory ClientFactory
@inject IAccountService AccountService


<HashTagBar></HashTagBar>
<div class="row">
    <div class="col-md-3 col-sm-6 my-2">
        <div class="card  h-100">
            <form method="post">
                <div class="card-body p-2">

                    <p class="card-text">
                        <textarea bind="@newToss.Content" placeholder="New Toss" class="form-control" style="min-width: 100%; height:200px;"></textarea>
                        <ValidationError FieldName="Content" Errors="@_errors" />
                    </p>



                </div>
                <div class="card-footer p-1 ">
                    <button onclick="@SendToss" ref="@sendButton" class="btn btn-primary btn-block" type="button">Toss-it</button>
                </div>
            </form>
        </div>
    </div>
    @foreach (var toss in Tosses.OrderByDescending(t => t.CreatedOn))
    {
        <div class="col-md-3 col-sm-6 my-2">
            <!-- Modal -->
            <div class="modal fade" id="@GetTossDetailsId(toss)" tabindex="-1" role="dialog" aria-hidden="true">
                <div class="modal-dialog" role="document">
                    <div class="modal-content">
                        
                        <div class="modal-body">
                            @toss.Content
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                          
                        </div>
                    </div>
                </div>
            </div>
            <div class="card  h-100" data-toggle="modal" onclick="@(() => ShowModal(toss))" style="cursor:zoom-in">
                <div class="card-body p-2">
                    <p class="card-text" style="max-height:200px;overflow-y: hidden;">@toss.Content</p>
                    <p class="card-text"><small class="text-muted">By @toss.UserName  @(Math.Round(toss.PostedAgo.TotalHours)) hrs ago</small></p>
                </div>
            </div>
        </div>
    }
</div>
@functions{
    List<TossLastQueryItem> Tosses = new List<TossLastQueryItem>();
    TossCreateCommand newToss = new TossCreateCommand();
    Dictionary<string,List<string>> _errors;
  
    ElementRef sendButton;
    [Parameter]
    private string CurrentTag { get; set; } = "";
   

    public override void SetParameters(ParameterCollection parameters)
    {       
        base.SetParameters(parameters);
    }

    protected async Task RefreshTossList()
    {
        var parameters = "?hashtag=" + CurrentTag;
        await ClientFactory.Create("/api/toss/last" + parameters)
            .OnOK<List<TossLastQueryItem>>(l => Tosses = l)
            .Get();
        StateHasChanged();
    }
    protected async Task SendToss()
    {
        await ClientFactory.Create("/api/toss/create", sendButton)
            .OnOK(async () =>
            {
                newToss = new TossCreateCommand();
                _errors = null;
                await RefreshTossList();
            })
            .OnBadRequest<Dictionary<string,List<string>>>(e => _errors = e)
            .Post(newToss);
        StateHasChanged();

    }

    protected void ShowModal(TossLastQueryItem toss)
    {
        JsInterop.ShowModal(GetTossDetailsId(toss));
    }
    protected string GetTossDetailsId(TossLastQueryItem toss)
    {
        return string.Format("toss-details-{0}", toss.Id);

    }
}
