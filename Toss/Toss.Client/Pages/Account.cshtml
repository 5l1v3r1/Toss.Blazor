@page "/account"
@inject HttpClient Http
@using Toss.Client.Services
@using Toss.Shared

<AccountNav></AccountNav>

@if (_account != null)
{

    <form>
        <div class="form-group">
            <label for="Username">Username</label>
            <input id="Username" bind="@_account.Username" class="form-control" />
            <ValidationError FieldName="Username" Errors="@_errors" />
        </div>
        <div class="form-group">
            <label for="Email">Email</label>

            <input for="Email" class="form-control" bind="@_account.Email" />
            <ValidationError FieldName="Email" Errors="@_errors" />

        </div>
        <div class="form-group">
            <label for="PhoneNumber">Phone number</label>
            <input id="PhoneNumber" class="form-control" bind="@_account.PhoneNumber" />
            <ValidationError FieldName="PhoneNumber" Errors="@_errors" />
        </div>
        <button type="button" onclick="@(async () => await PostAccount())" class="btn btn-default">Save</button>
    </form>

}
else
{
    <div class="alert alert-info">Loading...</div>

}

@functions {
        AccountViewModel _account;
        Dictionary<string, string> _errors;
    protected override async Task OnInitAsync()
    {
        _account = await Http.GetJsonAsync<Toss.Shared.AccountViewModel>("/manage/index");
        StateHasChanged();
    }
    async Task PostAccount()
    {

        JsInterop.ConsoleLog("PostAccount");
        await new HttpApiClientRequestBuilder( Http,"/manage/index")
            .OnBadRequest<Dictionary<string, string>>(errors => _errors = errors)
            .OnOK(async () =>
            {
                JsInterop.Toastr("success", "Informations saved successfully");
                _errors = null;
            })
            .Post(_account);
        StateHasChanged();
        JsInterop.ConsoleLog("PostAccount done");
    }
}

