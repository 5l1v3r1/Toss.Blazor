@inject IHttpApiClientRequestBuilderFactory ClientFactory;
@inject IUriHelper UriHelper
<div class="card">
    <div class="card-header">
        Use a Toss account to log in.
    </div>
    <div class="card-body  p-2">
        <form method="post">

            <div class="form-group row mb-1">
                <label for="UserName" class="col-sm-3 col-form-label">Username</label>

                <div class="col-sm-9">
                    <input bind="@loginCommand.UserName" id="UserName" class="form-control" />

                    <ValidationError Errors="@_errors" FieldName="UserName" />
                </div>
            </div>
            <div class="form-group row mb-1">
                <label asp-for="Password" class="col-sm-3 col-form-label">Password</label>

                <div class="col-sm-9">
                    <input bind="@loginCommand.Password" id="Password" type="password" class="form-control" />
                    <ValidationError Errors="@_errors" FieldName="Password" />
                </div>
            </div>
            <div class="form-group row mb-1">
                <div class="col-sm-3"></div>

                <div class="checkbox col-sm-9">

                    <div class="form-check">
                        <input class="form-check-input" id="RememberMe" bind="@loginCommand.RememberMe" type="checkbox" />
                        <label class="form-check-label" for="RememberMe">Remember me</label>
                    </div>
                </div>
            </div>
            <div class="form-group text-center mb-1">
                <button ref="loginButton" id="BtnLogin" type="button" onclick="@TryLogin" class="btn btn-default">Log in</button>
                <a href="/account/forgotPassword">Forgot your password?</a>
            </div>
        </form>
    </div>
</div>

@functions{
    ElementRef loginButton;
    LoginCommand loginCommand = new LoginCommand();
    Dictionary<string, List<string>> _errors;
    async Task<bool> TryLogin(UIEventArgs even)
    {
        var test = Json.Deserialize<Dictionary<string, List<string>>>("{\"Name\":[\"The Name field is required.\"],\"Email\":[\"The Email field is required.\"],\"Password\":[\"The Password field is required.\"]}");

        _errors = null;
        await ClientFactory.Create("/api/account/login", loginButton)
            .OnBadRequest<Dictionary<string, List<string>>>(errors => _errors = errors)
            .OnOK(null, "/")
            .Post(loginCommand);
        StateHasChanged();
        return false;
    }
}
