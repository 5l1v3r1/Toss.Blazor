@page "/account/resetPassword/{userId}/{code}"
@inject HttpClient Http
@inject IUriHelper UriHelper
@layout LoginLayout
<h2>TOSS</h2>
<h4>Reset your password.</h4>
<hr />
<div class="row">
    <div class="col-sm">
        <form method="post" onsubmit="@(async () => await ResetPassword())">
            <div class="form-group">
                <label for="Email">Email</label>
                <input id="Email" bind="@model.Email" class="form-control" />
                <ValidationError Errors="@_errors" FieldName="Email" />
            </div>
            <div class="form-group">
                <label for="Password">Password</label>
                <input id="Password" bind="@model.Password" class="form-control" />
                <ValidationError Errors="@_errors" FieldName="Password" />
            </div>
            <div class="form-group">
                <label for="ConfirmPassword">Confirm Password</label>
                <input id="ConfirmPassword" bind="@model.ConfirmPassword" class="form-control" />
                <ValidationError Errors="@_errors" FieldName="ConfirmPassword" />
            </div>
            <button type="submit" class="btn btn-default">Reset</button>
        </form>
    </div>
</div>


@functions{
    [Parameter]
    private string userId { get; set; }
    [Parameter]
    private string code { get; set; }
    ResetPasswordViewModel model = new ResetPasswordViewModel();
    Dictionary<string, string> _errors;
    async Task ResetPassword()
    {
        model.Code = code;
        await new HttpApiClientRequestBuilder(Http, "/api/account/resetPassword", UriHelper)
        .OnBadRequest<Dictionary<string, string>>(errors => _errors = errors)
        .OnOK(() =>
        {
            JsInterop.Toastr("success", "Your password has been reset you can now logon.");
            UriHelper.NavigateTo("/login");
            _errors = null;
        })
        .Post(model);
        StateHasChanged();
    }
}


